(function (d3) {
  'use strict';

  const svg = d3.select('svg');

  const width = +svg.attr('width');
  const height = +svg.attr('height');

  const render=function(data){
    const title = titleName;
    
    const xValue = function(d) {return d.x;};
    const xAxisLabel = xName+'/'+xUnit;
    
    const yValue = function(d) {return d.y;};
    const yAxisLabel = yName+'/'+yUnit;
    
    const margin = { top: 80, right: 40, bottom: 88, left: 105 };
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;
    
    const xScale = d3.scaleLinear()
      .domain(d3.extent(data, xValue))
      .range([0, innerWidth])
      .nice();
    
    const yScale = d3.scaleLinear()
      .domain(d3.extent(data, yValue))
      .range([innerHeight, 0])
      .nice();
    
    const g = svg.append('g')
      .attr('transform', 'translate('+margin.left+','+margin.top+')');
    
    const xAxis = d3.axisBottom(xScale)
      .tickSize(-innerHeight)
      .tickPadding(10);
    
    const yAxis = d3.axisLeft(yScale)
      .tickSize(-innerWidth)
      .tickPadding(10);
    
    const yAxisG = g.append('g').call(yAxis);
    yAxisG.selectAll('.domain').remove();
    
    yAxisG.append('text')
        .attr('class', 'axis-label')
        .attr('y', -60)
        .attr('x', -innerHeight / 2)
        .attr('fill', 'black')
        .attr('transform', 'rotate(-90)')
        .attr('text-anchor', 'middle')
        .text(yAxisLabel);
    
    const xAxisG = g.append('g').call(xAxis)
      .attr('transform',  'translate('+0+','+innerHeight+')');
    
    xAxisG.select('.domain').remove();
    
    xAxisG.append('text')
        .attr('class', 'axis-label')
        .attr('y', 80)
        .attr('x', innerWidth / 2)
        .attr('fill', 'black')
        .attr('text-anchor', 'middle')
        .text(xAxisLabel);
    
    const lineGenerator = d3.line()
      .x(function (d){return xScale(xValue(d));})
      .y(function (d){return yScale(yValue(d));})
      .curve(d3.curveBasis);
    
    g.append('path')
        .attr('class', 'line-path')
        .attr('d', lineGenerator(data));
    
    g.append('text')
        .attr('class', 'title')
        .attr('y', -25)
        .attr('x', innerWidth / 2)
		.attr('text-anchor', 'middle')
        .text(title);
  };
 
//目标文件
var filename = "dataSource";
//读取文件
xmlDoc = loadXMLDoc(filename+".xml");
var titleName=xmlDoc.getElementsByTagName("root")[0].getAttribute("id");
var xName=xmlDoc.getElementsByTagName("name")[0].childNodes[0].getAttribute("x");
var yName=xmlDoc.getElementsByTagName("name")[0].childNodes[0].getAttribute("y");
var xUnit=xmlDoc.getElementsByTagName("unit")[0].childNodes[0].getAttribute("x");
var yUnit=xmlDoc.getElementsByTagName("unit")[0].childNodes[0].getAttribute("y");
//读取数据
var data = new Array();
var dataSet=xmlDoc.getElementsByTagName("data")[0]
  console.log(dataSet.childNodes.length);
for(var i=0;i<dataSet.childNodes.length;i++)
{
  var oneRow={
    y:+dataSet.childNodes[i].getAttribute("y"),
    x:+dataSet.childNodes[i].getAttribute("x")
  };
	data.push(oneRow);
}
 render(data);
}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,